Docker default directory change
# Why We Need Separate Utilization for Docker Data
The default directory for Docker is /var/lib/docker. As you continue downloading images and generating logs, 
this directory will consume more space and eventually get busy. 
To prevent this, we can store all our Docker data in a separate directory.
df -h
lsblk
fdisk /dev/xvdf
n > p > w >
 lsblk
 mkfs.ext4 /dev/xvdf1
mkdir /dockerdata
vi /etc/fstab 
UUID=5076adb5-5baf-4be8-a94e-d49621bf5cd1  /dockerdata ext4
mount -a
df -h
cd /dockerdata/
for i in {1..10}; do echo $(date) > FILE=$i; done
ls -al
rm FILE*
ls -al
systemctl stop docker.service
systemctl stop docker.socker
systemctl stop docker.socket
vi /lib/systemd/system/docker.service
sudo rsync -aqxP /var/lib/docker/ /dockerdata
sudo systemctl daemon-reload && sudo systemctl start docker
sudo systemctl status docker --no-pager
df -h
docker run --rm -d --name app1 kiran2361993/troubleshootingtools:v1
df -h
cd containers/
cd a627851b13c7da8b9aaf9659365b4de528df0ca19329a4fe06bc05d785a16d81/
cat a627851b13c7da8b9aaf9659365b4de528df0ca19329a4fe06bc05d785a16d81-json.log
docker network ls
df -h
docker tag 4e2b1ec8f597 veerendranathc/troubleshootingtools
docker images
docker push veerendranathc/troubleshootingtools
docker ps -a
docker inspect app1 | grep -i IPAddress
docker run --rm -d --name app2 kiran2361993/troubleshootingtools:v1
docker ps -a
docker inspect app1 | grep -i IPAddress
docker inspect app2 | grep -i IPAddress
docker exec -it app1 bash
docker network ls
***Why We Need a Custom Network for Containers
With the default bridge network, containers can communicate with each other using IP addresses but not with container names. To enable communication using container names, we need to create a custom network.

First create a customer network
docker network create custom --driver bridge
 docker network ls
docker run --rm -d --name app4 -p 8004:80 --network custom kiran2361993/troubleshootingtools:v1
docker run --rm -d --name app4 -p 8005:80 --network custom kiran2361993/troubleshootingtools:v1
docker inspect app3 | grep -i IPAddress
docker inspect app4 | grep -i IPAddress
 docker exec -it app3 bash
docker network connect custom app1
 docker network connect custom app2
 docker network inspect custom
docker exec -it app3 bash
docker ps -a
docker stop $(docker ps -aq)
docker ps -a

###Using the HOST Network Mode###
The HOST network mode means the container shares the host's IP address. 
This eliminates the need for port forwarding when running the container.
For example, when using Prometheus with Node Exporter, it utilizes the host IP for metric collection, making it easier to access the metrics.
Example Command
docker run --rm -d --name node-exporter --network host prom/node-exporter
You can access the Node Exporter from the host's public IP on port 9100. To inspect the Docker image and understand the default settings, use the following command:

docker image inspect prom/node-exporter:latest

docker run --rm -d --name node-exporter --network host prom/node-exporter
docker image inspect prom/node-exporter:latest 
docker network ls
docker stop $(docker ps -aq)
docker ps -a
